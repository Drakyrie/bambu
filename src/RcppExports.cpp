// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// optim_b_rcpp
List optim_b_rcpp(const arma::rowvec theta, const arma::mat X, const arma::rowvec Y, const double lambda, const arma::rowvec b);
RcppExport SEXP _bamboo_optim_b_rcpp(SEXP thetaSEXP, SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_b_rcpp(theta, X, Y, lambda, b));
    return rcpp_result_gen;
END_RCPP
}
// optim_thetaandb_rcpp
List optim_thetaandb_rcpp(const arma::rowvec est, const arma::mat X, const arma::rowvec Y, const double lambda, const arma::rowvec nzindex);
RcppExport SEXP _bamboo_optim_thetaandb_rcpp(SEXP estSEXP, SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP nzindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type est(estSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type nzindex(nzindexSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_thetaandb_rcpp(est, X, Y, lambda, nzindex));
    return rcpp_result_gen;
END_RCPP
}
// em_theta
List em_theta(const arma::mat X, const arma::rowvec Y, const double lambda, const arma::rowvec b, const bool d, const int maxiter, const double conv);
RcppExport SEXP _bamboo_em_theta(SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP bSEXP, SEXP dSEXP, SEXP maxiterSEXP, SEXP convSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv(convSEXP);
    rcpp_result_gen = Rcpp::wrap(em_theta(X, Y, lambda, b, d, maxiter, conv));
    return rcpp_result_gen;
END_RCPP
}
// emWithL1
List emWithL1(const arma::mat X, const arma::rowvec Y, const double lambda, const bool d, const int maxiter, const double conv);
RcppExport SEXP _bamboo_emWithL1(SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP dSEXP, SEXP maxiterSEXP, SEXP convSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv(convSEXP);
    rcpp_result_gen = Rcpp::wrap(emWithL1(X, Y, lambda, d, maxiter, conv));
    return rcpp_result_gen;
END_RCPP
}
// emWithoutL1
List emWithoutL1(const arma::mat X, const arma::rowvec Y, const double lambda, const arma::rowvec nzindex, const double conv);
RcppExport SEXP _bamboo_emWithoutL1(SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP nzindexSEXP, SEXP convSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type nzindex(nzindexSEXP);
    Rcpp::traits::input_parameter< const double >::type conv(convSEXP);
    rcpp_result_gen = Rcpp::wrap(emWithoutL1(X, Y, lambda, nzindex, conv));
    return rcpp_result_gen;
END_RCPP
}
// run_em
List run_em(const List XList, const List YList, const List lambdaList, const bool d, const int maxiter, const double conv, const int nthr, bool display_progress);
RcppExport SEXP _bamboo_run_em(SEXP XListSEXP, SEXP YListSEXP, SEXP lambdaListSEXP, SEXP dSEXP, SEXP maxiterSEXP, SEXP convSEXP, SEXP nthrSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type XList(XListSEXP);
    Rcpp::traits::input_parameter< const List >::type YList(YListSEXP);
    Rcpp::traits::input_parameter< const List >::type lambdaList(lambdaListSEXP);
    Rcpp::traits::input_parameter< const bool >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< const int >::type nthr(nthrSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(run_em(XList, YList, lambdaList, d, maxiter, conv, nthr, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bamboo_optim_b_rcpp", (DL_FUNC) &_bamboo_optim_b_rcpp, 5},
    {"_bamboo_optim_thetaandb_rcpp", (DL_FUNC) &_bamboo_optim_thetaandb_rcpp, 5},
    {"_bamboo_em_theta", (DL_FUNC) &_bamboo_em_theta, 7},
    {"_bamboo_emWithL1", (DL_FUNC) &_bamboo_emWithL1, 6},
    {"_bamboo_emWithoutL1", (DL_FUNC) &_bamboo_emWithoutL1, 5},
    {"_bamboo_run_em", (DL_FUNC) &_bamboo_run_em, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_bamboo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
